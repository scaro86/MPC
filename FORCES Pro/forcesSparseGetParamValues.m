%% Interface between lineat MPC and FORCES QP Solver (internal)
%
%   The method geneartes "params" structure used by FORCES QP solver at run
%   time.
%
% Author(s): Rong Chen, MathWorks Inc.
%
% Copyright (c) 2019, The MathWorks, Inc. 
%
% All rights reserved. 
%
% Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 
%
% 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
%
% 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 
%
% 3. In all cases, the software is, and all modifications and derivatives of the software shall be, licensed to you solely for use in conjunction with MathWorks products and service offerings.  
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
%
%
%% Help
% data is a core data structure generated by "mpcToForces"
% onlinedata is a structure where 
%   yref is a matrix of p-by-ny values for output references
%   uref is a matrix pf p-by-nmv values for MV reference
%   md is a matrix of (p+1)-by-nmd values for MD
%   externalMV is a nmv-by-1 vector for true previous MV used in the plant 
%
% params(1) is "c", a column vector stacked from step 1 to p
% params(2) is "f", a column vector stacked from step 1 to p
% optional parameters:
%   "H" when "data.UseOnlineWeight" is true;
%
% For discrete-time prediction model defined as
%   x[k+1] = A*x[k] + Bmv*mv[k] + Bmd*md[k] + Bdx*1
%   y[k] = C*x[k] + 0*mv[k] + Dmd*md[k]
% where x/mv/md/y are deviation variables and Bdx is the nominal dx.
%
% Model needs to be translated into FORCES equality constraints.
% Therefore, we have for i=1 (as prediction step k+1)
%   DD[1] = [0 0 -I C; Bmv 0 0 -I; I -I 0 0]
%   cc[1] = [-Dmd*md[k+1]; -(A*x[k]+Bmd*md[k]+Bdx*1); lastMV]
% and for i=2,..p (as prediction steps k+2..k+p)
%   CC[i-1] = [0 0 0 0; 0 0 0 A; -I 0 0 0] 
%   DD[i] = [0 0 -I C; Bmv 0 0 -I; I -I 0 0]
%   cc[i] = [-Dmd*md(k+i); -Bmd*md[k+i-1]-Bdx*1; 0]
% For fixed prediction model, CC and DD do not change.  "cc" is a function
% of run time MD signal and thus passed in as parameter.
